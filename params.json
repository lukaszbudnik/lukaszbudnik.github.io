{"name":"lukaszbudnik.github.io","tagline":"lukaszbudnik.github.io","body":"### Multitenant & encryption data access layer POCs\r\nThere were two objectives for these POCs, namely: 1) support for multitenancy 2) support for encrypted entities. Below POCs are far from being finished. Every POC uses a different approach and it's not that easy to compare them. EclipseLink is the weakest POC due to its approach (eager encryption/decryption) and the fact that EclipseLink is too chatty. EclipseLink uses too many queries even for simple setting FK - compared to much better Hibernate. Also, Hibernate second level cache works like a charm and EclipseLink throws NPE. On the other hand EclipseLink has better support for multitenancy. Slick2 POC uses PlainSQL and requires some SQL to be written by hand, but on the other hand you have a full control of what you are doing.\r\n\r\n* <https://github.com/lukaszbudnik/slick-multitenant> - Slick2 multitenant Scala application. Encryption/decryption is implemented via Scala implicits.\r\n* <https://github.com/lukaszbudnik/hibernate-multitenant> - JPA Hibernate multitenant application with encrypted entities using @PrePersist/@PreUpdate and @PostLoad lifecycle callbacks.\r\n* <https://github.com/lukaszbudnik/eclipselink-multitenant> - JPA EclipseLink multitenant application with encrypted entities using eager FieldTransformer and AttributeTransformer. \r\n\r\nMy verdict is - Hibernate.","google":"UA-58059237-1","note":"Don't delete this file! It's used internally to help with page regeneration."}