{"name":"lukaszbudnik.github.io","tagline":"lukaszbudnik.github.io","body":"### Multitenant & encryption data access layer POCs\r\nThere were two main objectives: 1) support for multitenancy 2) support for encrypted entities. Below POCs are far from being finished. Every POC uses a different approach and it's hard to compare them. EclipseLink is the weakest POC due to its approach (eager encryption/decryption) and the fact that EclipseLink was too chatty.\r\n\r\n* <https://github.com/lukaszbudnik/slick-multitenant> - Slick2 multitenant Scala application. Encryption/decryption is implemented via Scala implicits.\r\n* <https://github.com/lukaszbudnik/hibernate-multitenant> - JPA Hibernate multitenant application with encrypted entities using lazy encryption/decryption.\r\n* <https://github.com/lukaszbudnik/eclipselink-multitenant> - JPA EclipseLink multitenant application with encrypted entities using eager read/write transformations. ","google":"UA-58059237-1","note":"Don't delete this file! It's used internally to help with page regeneration."}